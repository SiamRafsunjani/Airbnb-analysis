{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Identify superhost potentials in novice hosts","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"4NnZz15GN0EG","colab_type":"text"},"source":["# Inital setup\n","\n"]},{"cell_type":"code","metadata":{"id":"wvqXeOYfNcsh","colab_type":"code","colab":{}},"source":["# Install the PyDrive wrapper & import libraries.\n","# This only needs to be done once per notebook.\n","!pip install -U -q PyDrive\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","from google.colab import files\n","\n","# Authenticate and create the PyDrive client.\n","# This only needs to be done once per notebook.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)\n","\n","# Download a file based on its file ID.\n","Listing_data_id = \"16BBhwZLzCeZMVu_pexrUtCkEXPTvn-x5\"\n","Listing_data = \"listings.csv\"\n","downloaded = drive.CreateFile({'id': Listing_data_id})\n","downloaded.GetContentFile(Listing_data)\n","\n","\n","# Ignore IPythonNoteook Warnings\n","import warnings\n","warnings.filterwarnings(\"ignore\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RPFd68udqSTO","colab_type":"code","colab":{}},"source":["import    pandas     as pd\n","import    numpy      as np\n","import    matplotlib.pyplot as plt\n","import    time\n","from sklearn.preprocessing import MinMaxScaler"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eb5zOfMViH1D","colab_type":"text"},"source":["# Identify superhost potentials in novice hosts"]},{"cell_type":"markdown","metadata":{"id":"lijKtOp_PVwT","colab_type":"text"},"source":["# Introduction\n","\n","Airbnb has a program called superhost since 2016 to reward their most devoted hosts. It is a special VIP status for hosts. Other than a special cap superhosts are provided with benifits such as improved search placement, better booking conversations and more revenue. Airbnb launched this program to motivate hosts to consistantly use their platform other than other lodging platforms. \n","\n","Rating and reviews alone are not enough to categories between novice and professional top quality hosts. As 80% of Airbnb properties achieve more than 4.5 ratings due to brag-and-moan bias. As a result, most of the rating distributions are J-shaped with mostly 5 star ratings and some 1 stars. \n","\n","To solve these problems Airbnb started the superhost program. It was a genius business move.     \n","\n","\n","There are four criteria to become a superhost\n","\n","1. Host a minimum of 10 stays in a year\n","2. Respond to guests quickly and maintain a 90% response rate or higher\n","3. Have at least 80% 5-star reviews\n","4. Honor confirmed reservations (meaning hosts should rarely cancel)\n","\n","\n","In this study we will try to figure out if we can predict whether a new host can be in the future become a superhost. This has implications as it will help categorising between novice hosts. \n","\n","\n","We will conduct the study without features such as stay count, review count, reviews, cancelation numbers as theses are the main criteria for a superhost. The scope of this study is to find out what other charectaristics play factor to becoming a superhosts.   "]},{"cell_type":"markdown","metadata":{"id":"0NXloDXenwd-","colab_type":"text"},"source":["**Import dataset**"]},{"cell_type":"code","metadata":{"id":"nsUrzLwnPXg3","colab_type":"code","outputId":"748caf01-f9fa-4d51-bf0b-0bc0ae28be3e","executionInfo":{"status":"ok","timestamp":1566549028809,"user_tz":-360,"elapsed":14585,"user":{"displayName":"siam rafsan","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCktiBtF4jStgoKqlGXUE7j8653YYtnY5ro5lZi=s64","userId":"09780914350668689760"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# Dataset load\n","Listings = pd.read_csv( Listing_data, index_col=False )\n","\n","# Show features \n","Listings.columns\n","\n","\n","# define the columns we want to keep\n","columns_to_keep = ['property_type', 'room_type', 'accommodates', 'bathrooms',\n","                   'bedrooms', 'bed_type', 'price', 'extra_people', \n","                   'guests_included', 'instant_bookable',  \n","                   'is_business_travel_ready', 'cancellation_policy', 'host_is_superhost', \n","                   'host_neighbourhood', 'host_listings_count', 'host_identity_verified', 'cleaning_fee', \n","                   'availability_30', 'availability_60', 'availability_90',\n","                   'availability_365']\n","\n","# host_acceptance_rate is all NAN so leaving that out\n","\n","Listings_feature_selected = Listings[columns_to_keep]\n","print( Listings_feature_selected[\"host_neighbourhood\"] )"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0                  Mitte\n","1        Prenzlauer Berg\n","2        Prenzlauer Berg\n","3             Schöneberg\n","4        Prenzlauer Berg\n","5        Prenzlauer Berg\n","6        Prenzlauer Berg\n","7         Friedrichshain\n","8              Kreuzberg\n","9        Prenzlauer Berg\n","10            Copacabana\n","11       Prenzlauer Berg\n","12             Kreuzberg\n","13             Kreuzberg\n","14                 Mitte\n","15             Kreuzberg\n","16       Prenzlauer Berg\n","17       Prenzlauer Berg\n","18       Prenzlauer Berg\n","19       Prenzlauer Berg\n","20        Friedrichshain\n","21            Reuterkiez\n","22       Prenzlauer Berg\n","23       Prenzlauer Berg\n","24       Prenzlauer Berg\n","25                Moabit\n","26       Prenzlauer Berg\n","27        Charlottenburg\n","28            Schöneberg\n","29                 Mitte\n","              ...       \n","22522                NaN\n","22523     Charlottenburg\n","22524          Kreuzberg\n","22525                NaN\n","22526         Schöneberg\n","22527         Schöneberg\n","22528                NaN\n","22529           Neukölln\n","22530           Neukölln\n","22531              Mitte\n","22532    Friedrichsfelde\n","22533    Prenzlauer Berg\n","22534             Pankow\n","22535             Pankow\n","22536          Neuhausen\n","22537             Pankow\n","22538                NaN\n","22539                NaN\n","22540     Friedrichshain\n","22541                NaN\n","22542                NaN\n","22543           Neukölln\n","22544     Friedrichshain\n","22545     Friedrichshain\n","22546                NaN\n","22547              Mitte\n","22548    Prenzlauer Berg\n","22549    Prenzlauer Berg\n","22550              Mitte\n","22551           Neukölln\n","Name: host_neighbourhood, Length: 22552, dtype: object\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mNyC-GIIvPFU","colab_type":"text"},"source":["# **Preprocessing**\n","\n","*TODO: Was rapid prototyping so the coding standard was not up to the mark. *  \n","\n","Basic preprocessing was conducted\n","1. Converted to One hot vector for categorical features such as property type, room type etc\n","2. Removed $ and ,  from prices and converted to float\n","3. Converted boolean string t,f to 1 and 0.\n","4. Removed instances with missing values.\n","5. Normalised the dataset"]},{"cell_type":"code","metadata":{"id":"4NKOJwYQuSVB","colab_type":"code","colab":{}},"source":["def preprocessing(Listings_feature_selected):\n","  Listings_feature_selected = Listings_feature_selected.dropna()\n","  print (Listings_feature_selected)\n","\n","  # Get one hot encoding of columns\n","  property_type           = pd.get_dummies(Listings_feature_selected['property_type'])\n","  room_type               = pd.get_dummies(Listings_feature_selected['room_type'])\n","  cancellation_policy     = pd.get_dummies(Listings_feature_selected['cancellation_policy'])\n","  bed_type                = pd.get_dummies(Listings_feature_selected['bed_type'])\n","  host_neighbourhood      = pd.get_dummies(Listings_feature_selected['host_neighbourhood'])\n","\n","  # Drop column B as it is now encoded\n","  Listings_feature_selected = Listings_feature_selected.drop('property_type',axis = 1)\n","  Listings_feature_selected = Listings_feature_selected.drop('room_type',axis = 1)\n","  Listings_feature_selected = Listings_feature_selected.drop('cancellation_policy',axis = 1)\n","  Listings_feature_selected = Listings_feature_selected.drop('bed_type',axis = 1)\n","  Listings_feature_selected = Listings_feature_selected.drop('host_neighbourhood',axis = 1)\n","\n","  # Join the encoded list\n","  Listings_feature_selected = Listings_feature_selected.join(property_type)\n","  Listings_feature_selected = Listings_feature_selected.join(room_type)\n","  Listings_feature_selected = Listings_feature_selected.join(cancellation_policy)\n","  Listings_feature_selected = Listings_feature_selected.join(bed_type)\n","  Listings_feature_selected = Listings_feature_selected.join(host_neighbourhood)\n","\n","  Listings_feature_selected['price'] = Listings_feature_selected['price'].str[1:]\n","  Listings_feature_selected['price'] = Listings_feature_selected['price'].str.replace(',', '')\n","  Listings_feature_selected['price'] = Listings_feature_selected['price'].astype(float)\n","\n","  Listings_feature_selected['extra_people'] = Listings_feature_selected['extra_people'].str[1:]\n","  Listings_feature_selected['extra_people'] = Listings_feature_selected['extra_people'].str.replace(',', '')\n","  Listings_feature_selected['extra_people'] = Listings_feature_selected['extra_people'].astype(float)\n","\n","  Listings_feature_selected['cleaning_fee'] = Listings_feature_selected['cleaning_fee'].str[1:]\n","  Listings_feature_selected['cleaning_fee'] = Listings_feature_selected['cleaning_fee'].str.replace(',', '')\n","  Listings_feature_selected['cleaning_fee'] = Listings_feature_selected['cleaning_fee'].astype(float)\n","\n"," \n","  Listings_feature_selected['instant_bookable'] = Listings_feature_selected['instant_bookable'].str.replace('t', '1')\n","  Listings_feature_selected['instant_bookable'] = Listings_feature_selected['instant_bookable'].str.replace('f', '0')\n","  Listings_feature_selected['instant_bookable'] = Listings_feature_selected['instant_bookable'].astype(float)\n","\n","  Listings_feature_selected['host_is_superhost'] = Listings_feature_selected['host_is_superhost'].str.replace('t', '1')\n","  Listings_feature_selected['host_is_superhost'] = Listings_feature_selected['host_is_superhost'].str.replace('f', '0')\n","  Listings_feature_selected['host_is_superhost'] = Listings_feature_selected['host_is_superhost'].astype(float)\n","  \n","\n","  Listings_feature_selected['is_business_travel_ready'] = Listings_feature_selected['is_business_travel_ready'].str.replace('t', '1')\n","  Listings_feature_selected['is_business_travel_ready'] = Listings_feature_selected['is_business_travel_ready'].str.replace('f', '0')\n","  Listings_feature_selected['is_business_travel_ready'] = Listings_feature_selected['is_business_travel_ready'].astype(float)\n","\n","  Listings_feature_selected['host_identity_verified'] = Listings_feature_selected['host_identity_verified'].str.replace('t', '1')\n","  Listings_feature_selected['host_identity_verified'] = Listings_feature_selected['host_identity_verified'].str.replace('f', '0')\n","  Listings_feature_selected['host_identity_verified'] = Listings_feature_selected['host_identity_verified'].astype(float)\n","\n","  scaler = MinMaxScaler()\n","  Listings_feature_selected[Listings_feature_selected.columns] = scaler.fit_transform(Listings_feature_selected[Listings_feature_selected.columns])\n","  \n","  return Listings_feature_selected\n","\n","Listings_scaled = preprocessing(Listings_feature_selected);\n","\n","\n","Listings_scaled['host_is_superhost'].value_counts()\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zWN3mQuz5c1J","colab_type":"text"},"source":["# **Methodology**\n","\n","Lets divide into train, test set and try out some models. As it is a binary classification we can try out some used methods. \n","1. Decision tree\n","2. Random forest\n","3. Support vector machine \n","4. Logistic regression\n","5. Neural network\n","\n","\n","***We will test out Decision tree for this study.***\n","\n","Our matric will be to have a high precision. If many of the new novice hosts have the same facilities and attributes as the superhosts. We want to prioritise them. \n","\n","Recall does not matter here. As we dont want to identify superhosts. Superhosts not identified as superhosts is not our priority and scope of study here. We can however conduct studies to categories between superhosts depending on facilites. But that is a task for future.     \n"]},{"cell_type":"code","metadata":{"id":"64hC2Mm96hoC","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(Listings_scaled.drop('host_is_superhost', axis=1), Listings_scaled[\"host_is_superhost\"], test_size=0.3, random_state=66)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5icvcGG06__o","colab_type":"text"},"source":["**Lets define the model function**"]},{"cell_type":"code","metadata":{"id":"zIvcoGKI6_MM","colab_type":"code","colab":{}},"source":["from sklearn.metrics import precision_score, recall_score, accuracy_score, roc_curve, auc\n","\n","\n","def train_model(model, prediction_function, X_train, y_train, X_test, y_test):\n","    model.fit(X_train, y_train)\n","    \n","    y_train_pred = prediction_function(model, X_train)\n","    print('train precision: ' + str(precision_score(y_train, y_train_pred)))\n","    print('train recall: ' + str(recall_score(y_train, y_train_pred)))\n","    print('train accuracy: ' + str(accuracy_score(y_train, y_train_pred)))\n","    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, y_train_pred)\n","    roc_auc = auc(false_positive_rate, true_positive_rate)\n","    print('roc_auc: ' + str(roc_auc))\n","    \n","      \n","    y_test_pred = prediction_function(model, X_test)\n","    print('test precision: ' + str(precision_score(y_test, y_test_pred)))\n","    print('test recall: ' + str(recall_score(y_test, y_test_pred)))\n","    print('test accuracy: ' + str(accuracy_score(y_test, y_test_pred)))\n","    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_test_pred)\n","    roc_auc = auc(false_positive_rate, true_positive_rate)\n","    print('roc_auc: ' + str(roc_auc))\n","    \n","    return model"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dAhXk3En6NFN","colab_type":"text"},"source":["**Decision tree**\n","\n","Lets start with decision tree. We will use sklearn library for our method.  "]},{"cell_type":"code","metadata":{"id":"hTapdcH26KRq","colab_type":"code","outputId":"a358f022-cb8f-4685-d693-3058ee631726","executionInfo":{"status":"ok","timestamp":1566549030318,"user_tz":-360,"elapsed":16071,"user":{"displayName":"siam rafsan","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCktiBtF4jStgoKqlGXUE7j8653YYtnY5ro5lZi=s64","userId":"09780914350668689760"}},"colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["from sklearn import tree\n","\n","def get_predicted_outcome(model, data):\n","    return np.argmax(model.predict_proba(data), axis=1).astype(np.float32)\n","\n","def get_predicted_rank(model, data):\n","    return model.predict_proba(data)[:, 1]\n","  \n","model = train_model(tree.DecisionTreeClassifier(\n","class_weight=None, criterion='gini', max_depth=32,\n","max_features=None, max_leaf_nodes=None, min_samples_leaf=1,\n","min_samples_split=2, min_weight_fraction_leaf=0.0,\n","presort=False, random_state=None, splitter='best'), get_predicted_outcome, X_train, y_train, X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["train precision: 0.99933818663137\n","train recall: 1.0\n","train accuracy: 0.9998830819595463\n","roc_auc: 0.9999290075252023\n","test precision: 0.33925925925925926\n","test recall: 0.3464447806354009\n","test accuracy: 0.7605019094380796\n","roc_auc: 0.5990127397353378\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5UzL7wYABB_n","colab_type":"text"},"source":["Okay for the default values it overfits. Lets tune the parameters."]},{"cell_type":"markdown","metadata":{"id":"lUr7OqifBJTG","colab_type":"text"},"source":["**Max Depths**"]},{"cell_type":"code","metadata":{"id":"FfMPE3DR_tmK","colab_type":"code","outputId":"53d7e62a-cbe6-425e-93fc-bc394c12b875","executionInfo":{"status":"ok","timestamp":1566549034768,"user_tz":-360,"elapsed":20516,"user":{"displayName":"siam rafsan","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCktiBtF4jStgoKqlGXUE7j8653YYtnY5ro5lZi=s64","userId":"09780914350668689760"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["max_depths = np.linspace(1, 32, 32, endpoint=True)\n","train_results = []\n","test_results = []\n","\n","\n","for max_depth in max_depths:\n","   dt = tree.DecisionTreeClassifier(max_depth=max_depth)\n","   dt.fit(X_train, y_train)\n","   train_pred = dt.predict(X_train)\n","   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n","   roc_auc = auc(false_positive_rate, true_positive_rate)\n","   # Add auc score to previous train results\n","   train_results.append(roc_auc)\n","   y_pred = dt.predict(X_test)\n","   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n","   roc_auc = auc(false_positive_rate, true_positive_rate)\n","   # Add auc score to previous test results\n","   test_results.append(roc_auc)\n","from matplotlib.legend_handler import HandlerLine2D\n","\n","line1 = plt.plot(max_depths, train_results, 'b', label='Train AUC')\n","line2 = plt.plot(max_depths, test_results, 'r', label='Test AUC')\n","\n","plt.legend(['AUC score', 'Tree depth'])\n","plt.show()\n"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXcAAAD8CAYAAACMwORRAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3Xd8VFX6x/HPkd4EKTaQoiiC0rNS\nLMjaABEVEUFlRVFcBUXRdXF/Kiy6ig2E1UVxKWKJIiqigooUBVGkyQKhGBAkSAkgJfQk5/fHM5AQ\nSgKZ5M5Mvu/Xa14zc+fOzHNnkicn557zHOe9R0REYstJQQcgIiLhp+QuIhKDlNxFRGKQkruISAxS\nchcRiUFK7iIiMUjJXUQkBim5i4jEICV3EZEYVDioN65YsaKvXr16UG8vIhKV5s6du8l7Xym7/QJL\n7tWrV2fOnDlBvb2ISFRyzq3OyX7qlhERiUFK7iIiMUjJXUQkBmXb5+6cGwG0BTZ67y88wuMOGAy0\nAXYBXb33804kmP3795OUlMSePXtO5OmSQ8WLF6dKlSoUKVIk6FBEJI/k5ITqKOBVYPRRHm8NnBu6\nNAGGhq6PW1JSEmXKlKF69erY3wwJN+89mzdvJikpiRo1agQdjojkkWy7Zbz33wFbjrHL9cBob34E\nyjnnzjiRYPbs2UOFChWU2POQc44KFSrovyORGBeOPvfKwJpM95NC206IEnve02csEvvydZy7c647\n0B2gatWq+fnWIiLHxXtYuRKmTIE9e6BxY2jQAEqWzN1rrlkDZcrAKaeEL9YjCUfLfS1wVqb7VULb\nDuO9H+a9j/Pex1WqlO0Eq8CMGzcO5xxLly49uG3atGm0bdv2kP26du3K2LFjATsZ3KdPH84991wa\nNWpEs2bNmDhxYr7GLSK5s3YtvPMO3HknVK8ONWtC9+7w4INw8cWWlOvVs8dfew1+/BF27z78ddLS\nYMUK+OwzeP55uOMO+NOf4OSToVo1+PDDvD+WcLTcxwM9nXPvYydSt3nv14XhdQMTHx/PJZdcQnx8\nPP/85z9z9Jwnn3ySdevWsWjRIooVK8aGDRv49ttv8zRO7z3ee046SSNaRU7E5s0wbZq1zidPhmXL\nbHuFCtCyJfTpA3/+M5QuDXPnwpw5dj1hAowaZfsWKgQXXgiNGlkLPyHBXifzaa0zz4Q6deCuu+z6\nz3/O+2PLyVDIeOByoKJzLgnoCxQB8N6/DkzAhkEmYkMh78yrYPNDSkoKM2bMYOrUqVx33XU5Su67\ndu3izTff5Ndff6VYsWIAnHbaaXTs2PGwffv06cP48eMpXLgwV199NS+99BIbNmzgr3/9KytXrgRg\n6NChNG/enIEDBzJixAgA7r77bh566CFWrVrFNddcQ5MmTZg7dy4TJkxg2bJl9O3bl71793LOOecw\ncuRISpcuHcZPRSR67NkDM2dCcjJs2WIJPPN15tubNllXSenScNllcM89cMUV1jrP2maqXBnatbPb\n3kNS0qEJ/4svoEQJS95XXmnXderA+edDuXL5/zlkm9y9952zedwDPcIWUchDD8HPP4f3NRs0gFde\nOfY+n376Ka1ateK8886jQoUKzJ07l8aNGx/zOYmJiVStWpWTTz75mPtt3ryZTz75hKVLl+KcY+vW\nrQA8+OCDtGjRgk8++YS0tDRSUlKYO3cuI0eOZNasWXjvadKkCS1atOCUU07hl19+4a233qJp06Zs\n2rSJZ555hm+++YZSpUrx/PPPM3DgQJ566qnj+mxEol1SEgwdCsOGWdLOrHRpKF/eWuTly0P9+nZ9\n1llw+eXWZXI80z6cs+eedRbccENYDyNsAiscFqni4+Pp1asXAJ06dSI+Pp7GjRsfdYTJ8Yw8KVu2\nLMWLF6dbt260bdv2YB/+lClTGD3aphEUKlSIsmXLMmPGDG688UZKlSoFQPv27Zk+fTrt2rWjWrVq\nNG3aFIAff/yRhIQELr74YgD27dtHs2bNTuzgRaKM99ZKHzIEPvoI0tOtdX333XD22ZbAy5eHokWD\njjT/RWxyz66FnRe2bNnClClTWLhwIc450tLScM7x4osvUqFCBf7444/D9q9YsSI1a9bkt99+Y/v2\n7cdsvRcuXJiffvqJyZMnM3bsWF599VWmTJly3HEeSPhg/e5XXXUV8fHxx/06ItFqzx54/31L6vPn\nW7fHww/D/feD5uYZnYnLZOzYsXTp0oXVq1ezatUq1qxZQ40aNZg+fTrnnnsuv//+O0uWLAFg9erV\nLFiwgAYNGlCyZEm6detGr1692LdvHwDJycl8mOWUeEpKCtu2baNNmzYMGjSIBQsWAHDFFVcwdOhQ\nANLS0ti2bRuXXnop48aNY9euXezcuZNPPvmESy+99LCYmzZtyvfff09iYiIAO3fuZPny5Xn2GYkE\nKSkJ/u//rDvkzjth3z544w3b/uKLSuyZKblnEh8fz4033njItptuuon4+HiKFSvGO++8w5133kmD\nBg3o0KED//3vfylbtiwAzzzzDJUqVaJOnTpceOGFtG3b9rBW/I4dO2jbti316tXjkksuYeDAgQAM\nHjyYqVOnUrduXRo3bkxCQgKNGjWia9euXHTRRTRp0oS7776bhg0bHhZzpUqVGDVqFJ07d6ZevXo0\na9bskCGcIrFg40bo2dOS93PPwSWX2OiWhQttqGKmf2YlxNn50PwXFxfnsy7WsWTJEmrXrh1IPAWN\nPmuJBikpMHCgtcp377bRLI89VrBb6M65ud77uOz2i9g+dxEpuFJTYfhw6NsXNmyA9u3h2WehVq2g\nI4seSu4iEjG8h08/tclDy5bZrNCPP4bmzYOOLPqoz11EIsLMmdaXfuC017hxMH26EvuJUnIXkcCk\np8OkSTY2/eKLrVDXG2/AokVw/fU2WUhOjLplRCTfbdgAI0fCm29aQq9QAfr3h969NfIlXJTcRSRf\npKfD1KnWMh83DvbvhxYt4Omn7YRp8eJBRxhb1C2TyebNm2nQoAENGjTg9NNPp3LlygfvH5icFG6p\nqamUy0VVoYEDBx5cVSm3ryWSFzZuhBdesJEuV15p49N79oQlS6wi4623KrHnBbXcM6lQoQI/h6qV\n9evXj9KlS/Poo48esk+kldkdOHAgd911F8X12yERZt48ePllq12+fz9cein06wc33aRknh8iI0NF\nuMTEROrUqcNtt93GBRdcwLp165g4cSLNmjWjUaNG3HLLLezcuROA2bNn06JFCxo3bkzr1q3ZsGHD\nYa+3YsUKmjRpQt26denbt+8hjw0YMICLLrqIevXq0b9//4Pvf8EFF9CpUydq165Nx44d2b17N4MG\nDWLjxo1ceumlXHnllQdfo0+fPtSvX59mzZqxcePGPPxkRA7lPUycaGVzGze2xSruuw8WL4bvvoPb\nblNizy+R23IPqubvUSxdupTRo0cTFxfHxo0bGTBgAJMnT6ZkyZL861//YvDgwTzyyCP06tWL8ePH\nU7FiRd59912efPJJhg0bdshrPfDAA/Tq1Ytbb72VwYMHH9w+YcIEfvvtt4Nlftu0acPMmTM59dRT\nSUhIYPjw4TRt2pS//OUvvPHGGzz88MO8/PLLTJ8+nXLlypGamsq2bdto0aIFAwYMoHfv3owYMYI+\n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\nEoP+H57TDtucFMcuAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"5M7GEJfxCOwY","colab_type":"text"},"source":["We can see that for lower max tree depth it fits nicely. Lets test it again. "]},{"cell_type":"code","metadata":{"id":"aYG2tqVJCk5n","colab_type":"code","outputId":"613fb70d-5630-4232-a8b1-be8dc489c90e","executionInfo":{"status":"ok","timestamp":1566549034769,"user_tz":-360,"elapsed":20511,"user":{"displayName":"siam rafsan","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCktiBtF4jStgoKqlGXUE7j8653YYtnY5ro5lZi=s64","userId":"09780914350668689760"}},"colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["model = train_model(tree.DecisionTreeClassifier(\n","class_weight=None, criterion='gini', max_depth=10,\n","max_features=None, max_leaf_nodes=None, min_samples_leaf=1,\n","min_samples_split=.1, min_weight_fraction_leaf=0.0,\n","presort=False, random_state=None, splitter='best'), get_predicted_outcome, X_train, y_train, X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["train precision: 0.5929203539823009\n","train recall: 0.08874172185430464\n","train accuracy: 0.8283643166140535\n","roc_auc: 0.5378395532457666\n","test precision: 0.5\n","test recall: 0.08472012102874432\n","test accuracy: 0.8196944899072559\n","roc_auc: 0.5330422568538064\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"w-HYgtI8DBlf","colab_type":"text"},"source":["We have high precision and low recall. This is what we wanted. But lets tune some more to see if we can better the method. "]},{"cell_type":"code","metadata":{"id":"ThfQtn51GK9F","colab_type":"code","outputId":"cf040bb1-4375-40fb-9b35-3d26a2a84000","executionInfo":{"status":"ok","timestamp":1566549061463,"user_tz":-360,"elapsed":47201,"user":{"displayName":"siam rafsan","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCktiBtF4jStgoKqlGXUE7j8653YYtnY5ro5lZi=s64","userId":"09780914350668689760"}},"colab":{"base_uri":"https://localhost:8080/","height":787}},"source":["from matplotlib.legend_handler import HandlerLine2D\n","\n","max_features = list(range(1, X_train.shape[1]))\n","min_samples_splits = np.linspace(0.1, 1.0, 10, endpoint=True)\n","min_samples_leafs = np.linspace(0.1, 0.5, 5, endpoint=True)\n","\n","train_results = []\n","test_results = []\n","\n","for min_samples_split in min_samples_splits:\n","   dt = tree.DecisionTreeClassifier(min_samples_split=min_samples_split)\n","   dt.fit(X_train, y_train)\n","   train_pred = dt.predict(X_train)\n","   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n","   roc_auc = auc(false_positive_rate, true_positive_rate)\n","   # Add auc score to previous train results\n","   train_results.append(roc_auc)\n","   y_pred = dt.predict(X_test)\n","   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n","   roc_auc = auc(false_positive_rate, true_positive_rate)\n","   # Add auc score to previous test results\n","   test_results.append(roc_auc)\n","\n","\n","line1 = plt.plot(min_samples_splits, train_results, 'b', label='Train AUC')\n","line2 = plt.plot(min_samples_splits, test_results, 'r', label='Test AUC')\n","plt.legend(['AUC score', 'min samples split'])\n","plt.show()\n","\n","train_results = []\n","test_results = []\n","\n","\n","for min_samples_leaf in min_samples_leafs:\n","   dt = tree.DecisionTreeClassifier(min_samples_leaf=min_samples_leaf)\n","   dt.fit(X_train, y_train)\n","   train_pred = dt.predict(X_train)\n","   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n","   roc_auc = auc(false_positive_rate, true_positive_rate)\n","   # Add auc score to previous train results\n","   train_results.append(roc_auc)\n","   y_pred = dt.predict(X_test)\n","   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n","   roc_auc = auc(false_positive_rate, true_positive_rate)\n","   # Add auc score to previous test results\n","   test_results.append(roc_auc)  \n","  \n","\n","line1 = plt.plot(min_samples_leafs, train_results, 'b', label='Train AUC')\n","line2 = plt.plot(min_samples_leafs, test_results, 'r', label='Test AUC')\n","plt.legend(['AUC score', 'min samples split'])\n","plt.show()\n","\n","\n","\n","\n","max_features = list(range(1,X_train.shape[1]))\n","train_results = []\n","test_results = []\n","for max_feature in max_features:\n","   dt = tree.DecisionTreeClassifier(max_features=max_feature)\n","   dt.fit(X_train, y_train)\n","   train_pred = dt.predict(X_train)\n","   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n","   roc_auc = auc(false_positive_rate, true_positive_rate)\n","   train_results.append(roc_auc)\n","   y_pred = dt.predict(X_test)\n","   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n","   roc_auc = auc(false_positive_rate, true_positive_rate)\n","   test_results.append(roc_auc)\n","from matplotlib.legend_handler import HandlerLine2D\n","line1, = plt.plot(max_features, train_results, 'b', label='Train AUC')\n","line2, = plt.plot(max_features, test_results, 'r', label='Test AUC')\n","\n","plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n","plt.ylabel('AUC score')\n","plt.xlabel('max features')\n","plt.show()\n","\n"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nAV84oWy/MdYWAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\ngg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nU9UGDWx4wIDot+VOji1bIs+Tm2vrHjGi4HVt367ao4dqnz6W+YQGkalT/Qv8iy9s+Ior8q9n5kz7\n7MQT7f355+09IUH1tNNUjz9e9cEHbdqmTf5yM2b4F4jLPCP5+WfL4OfPz78PInahuovX2bjRz+iC\nM4RQAwaonnSSP96zp62zdWvVGjXsu9q9W/Xxx21dNWqoduqkOneuXWyqqjfd5GfKzz+vOmqUv+2Z\nMy1gAaqrVtn82dk2fvXV9v7UUzb9449t/PPP7XhefHHetI4cacd1yBDVRo386R98YMv16GHv69bZ\n9Dp1LIMELED362ffx44dNu3++22+886z/f3sM9X9+y0jqlnTgkewrVttucce86f16aPaoYPq66/b\nZ7ffbplPly55l/3xR9Xp0+38XLLEPz533WXHsWpVG09Pz/8dnXSSfdaihRWwGjXyA+iwYarHHecX\nAF57TfWMM+xYqNp3B1iG7Pz8s33Hf/+7avPmVgBYu9b/vFkz1YEDLa116qhmZNi5C6jWqmWFjKpV\n7TgAqt9953/H9erZe58+qnPm5N2Pa6+1z1q2VE1JsWA6YoR9p+ECyWefWXB112FwoJs40abXqWPB\nZetWm/7SSza9fXvVRx5RHTTIthNccHLD8+db3jRxYv5tR6k8BIWLAfw7aPxyAM+GzDMpEBi+AvAN\ngF4R1pUBYB6AeSeccELxjsjDD9tJEhyVQ/36q32h7iI4/XQ/A2nQwL6UaLlA8sorkedxpfrQDCWU\ny+ROPdXef/c7u3Cd117z0/zww/besaN9Flziv/VWO6nnzLF5ata01zHH2Pgzz/gls48+8pd78kn1\nSorBJcZwPvrI5nnkEctYzz7b1ulKznPnqp58smVujktzz56WnsOH/c9GjvRLtx065F3u11+tVqCq\n+u23dvH07m0ZU+fOqm+84R+XatUsM6pZ0zKRtDTVdu0sQ0hIsHlcGgGrUan6QXbKFCv1n366Tb/l\nFjtue/daadydl/v2qd59t82XnKx65512Du3apfrDD5ZxHHuspRewmooLPCNG2PuVV9q+jBxp6zzx\nRNVLLrHhVq3yl9DPOccylmCTJ9u6vvzSn3bVVVZirVNH9Q9/sJLn9dfbMXHnSW6uBWb3fXTtaplq\n06aq55/vB4lataxmGuzgQcv8ExJsn8880+Z138Obb1ra3TFes8Zq0+66+t//8p97qnYc3Xd07LFW\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"2Q1-8ISgJpAG","colab_type":"text"},"source":["From these we can see that min_samples_leaf does not have any effect on our roc. from max features we can see that it is an overfitting problem. Lets train our model one more time"]},{"cell_type":"code","metadata":{"id":"dQiwmjAdJ4hu","colab_type":"code","outputId":"647497b8-d151-4568-e5fc-bd58450c6ab6","executionInfo":{"status":"ok","timestamp":1566549061463,"user_tz":-360,"elapsed":47196,"user":{"displayName":"siam rafsan","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCktiBtF4jStgoKqlGXUE7j8653YYtnY5ro5lZi=s64","userId":"09780914350668689760"}},"colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["model = train_model(tree.DecisionTreeClassifier(\n","class_weight=None, criterion='gini', max_depth=10,\n","max_features=None, max_leaf_nodes=None, min_samples_leaf=10,\n","min_samples_split=.1, min_weight_fraction_leaf=0.0,\n","presort=False, random_state=None, splitter='best'), get_predicted_outcome, X_train, y_train, X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["train precision: 0.5673076923076923\n","train recall: 0.0781456953642384\n","train accuracy: 0.8267274640477026\n","roc_auc: 0.5326835249503287\n","test precision: 0.5283018867924528\n","test recall: 0.08472012102874432\n","test accuracy: 0.8213311511183852\n","roc_auc: 0.5340405929602956\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UrU_ppfTOm6W","colab_type":"text"},"source":["# **Result Analysis**\n","\n","We can see in the final results we have a test precision score of .56 and accuracy of 82%. So this should identify and prioritise some potential superhosts. We can store the data which was identified as a superhost and became a superhost. Then use that data to fine tune the model."]}]}